@page "/portfolio-dashboard"
@inject IPortfolioDataService PortfolioService
@using P1SecclApp.FrontendWasm.Models

<PageTitle>Portfolio Dashboard</PageTitle>

<h1>Portfolio Dashboard</h1>

<p>This dashboard displays aggregated portfolio information from the SECCL API via our backend.</p>

<div class="mb-3">
    <label for="portfolioIdsInput" class="form-label">Portfolio IDs (comma-separated, optional):</label>
    <input type="text" class="form-control" id="portfolioIdsInput" @bind="portfolioIdsInput" />
    <button class="btn btn-primary mt-2" @onclick="LoadData">Load Portfolio Data</button>
</div>


@if (isLoading)
{
    <p><em>Loading data... Please wait.</em></p>
    <p><em>(If this takes too long, ensure your P1SecclApp.BackendApi is running and you've replaced placeholder IDs in Core/Services/PortfolioAggregationService.cs with real ones, or provide valid IDs above.)</em></p>
}
else
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (aggregatedTotal != null)
    {
        <div class="card mt-3">
            <div class="card-header">
                Aggregated Total Value
            </div>
            <div class="card-body">
                <h5 class="card-title">Total Value: @aggregatedTotal.TotalValue.ToString("C")</h5>
                <p class="card-text">
                    Based on portfolios: @(aggregatedTotal.PortfolioIdsIncluded != null ? string.Join(", ", aggregatedTotal.PortfolioIdsIncluded) : "N/A")
                </p>
            </div>
        </div>
    }
    else
    {
        <p><em>No aggregated total data to display. Backend API might not have found data for the provided IDs.</em></p>
    }

    @if (aggregatedByAccountType != null && aggregatedByAccountType.Aggregations != null && aggregatedByAccountType.Aggregations.Any())
    {
        <div class="card mt-3">
            <div class="card-header">
                Aggregated Totals by Account Type
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Account Type</th>
                            <th>Total Value</th>
                            <th>Portfolio Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in aggregatedByAccountType.Aggregations)
                        {
                            <tr>
                                <td>@item.AccountType</td>
                                <td>@item.TotalValue.ToString("C")</td>
                                <td>@item.PortfolioCount</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <p class="card-text">
                    Based on portfolios: @(aggregatedByAccountType.PortfolioIdsIncluded != null ? string.Join(", ", aggregatedByAccountType.PortfolioIdsIncluded) : "N/A")
                </p>
            </div>
        </div>
    }
    else
    {
        <p class="mt-3"><em>No data for aggregation by account type, or no portfolios had identifiable account types.</em></p>
    }
}

@code {
    private AggregatedPortfolioTotal? aggregatedTotal;
    private AggregatedPortfolioByAccountType? aggregatedByAccountType;
    private bool isLoading = false;
    private string? errorMessage;
    private string portfolioIdsInput = "DEMO_PORTFOLIO_ID_1,DEMO_PORTFOLIO_ID_2,DEMO_PORTFOLIO_ID_3"; // Default example, can be changed by user

    // This method is called when the component is first initialized.
    // Let's change to load data on button click instead for more control.
    // protected override async Task OnInitializedAsync()
    // {
    // await LoadData();
    // }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        aggregatedTotal = null;
        aggregatedByAccountType = null;

        List<string>? ids = null;
        if (!string.IsNullOrWhiteSpace(portfolioIdsInput))
        {
            ids = portfolioIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        }

        try
        {
            // If ids list is empty after split, the service will use its defaults if implemented that way,
            // or you might choose to not call if ids is empty and portfolioIdsInput was also empty.
            // Our backend API uses defaults if 'ids' parameter is not present or empty.
            aggregatedTotal = await PortfolioService.GetAggregatedTotalAsync(ids);
            aggregatedByAccountType = await PortfolioService.GetAggregatedByAccountTypeAsync(ids);

            if (aggregatedTotal == null && aggregatedByAccountType == null)
            {
                errorMessage = "Failed to load any portfolio data. The backend API might be down, " +
                               "CORS might be misconfigured, or no data found for the specified IDs. " +
                               "Check the browser's developer console (F12) for network errors.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading portfolio data: {ex.Message}");
            errorMessage = $"An error occurred while fetching data: {ex.Message}. See console for details.";
        }
        finally
        {
            isLoading = false;
        }
    }
}